# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import uggly_pb2 as uggly__pb2


class FeedStub(object):
    """Feed service can be implemented by the server
    and must provide a FeedResponse for a given FeedRequest.
    This is to be used as somewhat of a server index of 
    available Pages when the server chooses to implement.
    It is strongly encouraged to implement a Feed because
    it makes for quality of life improvements for the client's
    user
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFeed = channel.unary_unary(
                '/uggly.Feed/GetFeed',
                request_serializer=uggly__pb2.FeedRequest.SerializeToString,
                response_deserializer=uggly__pb2.FeedResponse.FromString,
                )


class FeedServicer(object):
    """Feed service can be implemented by the server
    and must provide a FeedResponse for a given FeedRequest.
    This is to be used as somewhat of a server index of 
    available Pages when the server chooses to implement.
    It is strongly encouraged to implement a Feed because
    it makes for quality of life improvements for the client's
    user
    """

    def GetFeed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FeedServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFeed': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFeed,
                    request_deserializer=uggly__pb2.FeedRequest.FromString,
                    response_serializer=uggly__pb2.FeedResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'uggly.Feed', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Feed(object):
    """Feed service can be implemented by the server
    and must provide a FeedResponse for a given FeedRequest.
    This is to be used as somewhat of a server index of 
    available Pages when the server chooses to implement.
    It is strongly encouraged to implement a Feed because
    it makes for quality of life improvements for the client's
    user
    """

    @staticmethod
    def GetFeed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/uggly.Feed/GetFeed',
            uggly__pb2.FeedRequest.SerializeToString,
            uggly__pb2.FeedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PageStub(object):
    """In order for a server to serve any content it must 
    implement the Page service which returns PageResponse
    for a given PageRequest
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPage = channel.unary_unary(
                '/uggly.Page/GetPage',
                request_serializer=uggly__pb2.PageRequest.SerializeToString,
                response_deserializer=uggly__pb2.PageResponse.FromString,
                )
        self.GetPageStream = channel.unary_stream(
                '/uggly.Page/GetPageStream',
                request_serializer=uggly__pb2.PageRequest.SerializeToString,
                response_deserializer=uggly__pb2.PageResponse.FromString,
                )


class PageServicer(object):
    """In order for a server to serve any content it must 
    implement the Page service which returns PageResponse
    for a given PageRequest
    """

    def GetPage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPageStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPage,
                    request_deserializer=uggly__pb2.PageRequest.FromString,
                    response_serializer=uggly__pb2.PageResponse.SerializeToString,
            ),
            'GetPageStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetPageStream,
                    request_deserializer=uggly__pb2.PageRequest.FromString,
                    response_serializer=uggly__pb2.PageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'uggly.Page', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Page(object):
    """In order for a server to serve any content it must 
    implement the Page service which returns PageResponse
    for a given PageRequest
    """

    @staticmethod
    def GetPage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/uggly.Page/GetPage',
            uggly__pb2.PageRequest.SerializeToString,
            uggly__pb2.PageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPageStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/uggly.Page/GetPageStream',
            uggly__pb2.PageRequest.SerializeToString,
            uggly__pb2.PageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
