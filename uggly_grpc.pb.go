// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: uggly.proto

package uggly

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeedClient is the client API for Feed service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedClient interface {
	GetFeed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*FeedResponse, error)
}

type feedClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedClient(cc grpc.ClientConnInterface) FeedClient {
	return &feedClient{cc}
}

func (c *feedClient) GetFeed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*FeedResponse, error) {
	out := new(FeedResponse)
	err := c.cc.Invoke(ctx, "/uggly.Feed/GetFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedServer is the server API for Feed service.
// All implementations must embed UnimplementedFeedServer
// for forward compatibility
type FeedServer interface {
	GetFeed(context.Context, *FeedRequest) (*FeedResponse, error)
	mustEmbedUnimplementedFeedServer()
}

// UnimplementedFeedServer must be embedded to have forward compatible implementations.
type UnimplementedFeedServer struct {
}

func (UnimplementedFeedServer) GetFeed(context.Context, *FeedRequest) (*FeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeed not implemented")
}
func (UnimplementedFeedServer) mustEmbedUnimplementedFeedServer() {}

// UnsafeFeedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedServer will
// result in compilation errors.
type UnsafeFeedServer interface {
	mustEmbedUnimplementedFeedServer()
}

func RegisterFeedServer(s grpc.ServiceRegistrar, srv FeedServer) {
	s.RegisterService(&Feed_ServiceDesc, srv)
}

func _Feed_GetFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).GetFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uggly.Feed/GetFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).GetFeed(ctx, req.(*FeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Feed_ServiceDesc is the grpc.ServiceDesc for Feed service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Feed_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uggly.Feed",
	HandlerType: (*FeedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeed",
			Handler:    _Feed_GetFeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uggly.proto",
}

// SiteClient is the client API for Site service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SiteClient interface {
	GetSite(ctx context.Context, in *SiteRequest, opts ...grpc.CallOption) (*SiteResponse, error)
}

type siteClient struct {
	cc grpc.ClientConnInterface
}

func NewSiteClient(cc grpc.ClientConnInterface) SiteClient {
	return &siteClient{cc}
}

func (c *siteClient) GetSite(ctx context.Context, in *SiteRequest, opts ...grpc.CallOption) (*SiteResponse, error) {
	out := new(SiteResponse)
	err := c.cc.Invoke(ctx, "/uggly.Site/GetSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SiteServer is the server API for Site service.
// All implementations must embed UnimplementedSiteServer
// for forward compatibility
type SiteServer interface {
	GetSite(context.Context, *SiteRequest) (*SiteResponse, error)
	mustEmbedUnimplementedSiteServer()
}

// UnimplementedSiteServer must be embedded to have forward compatible implementations.
type UnimplementedSiteServer struct {
}

func (UnimplementedSiteServer) GetSite(context.Context, *SiteRequest) (*SiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSite not implemented")
}
func (UnimplementedSiteServer) mustEmbedUnimplementedSiteServer() {}

// UnsafeSiteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SiteServer will
// result in compilation errors.
type UnsafeSiteServer interface {
	mustEmbedUnimplementedSiteServer()
}

func RegisterSiteServer(s grpc.ServiceRegistrar, srv SiteServer) {
	s.RegisterService(&Site_ServiceDesc, srv)
}

func _Site_GetSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServer).GetSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uggly.Site/GetSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServer).GetSite(ctx, req.(*SiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Site_ServiceDesc is the grpc.ServiceDesc for Site service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Site_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uggly.Site",
	HandlerType: (*SiteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSite",
			Handler:    _Site_GetSite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uggly.proto",
}
