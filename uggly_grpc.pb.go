// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package uggly

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ScreenerClient is the client API for Screener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScreenerClient interface {
	GetScreens(ctx context.Context, in *ScreenSet, opts ...grpc.CallOption) (Screener_GetScreensClient, error)
}

type screenerClient struct {
	cc grpc.ClientConnInterface
}

func NewScreenerClient(cc grpc.ClientConnInterface) ScreenerClient {
	return &screenerClient{cc}
}

func (c *screenerClient) GetScreens(ctx context.Context, in *ScreenSet, opts ...grpc.CallOption) (Screener_GetScreensClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Screener_serviceDesc.Streams[0], "/uggly.Screener/GetScreens", opts...)
	if err != nil {
		return nil, err
	}
	x := &screenerGetScreensClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Screener_GetScreensClient interface {
	Recv() (*Screen, error)
	grpc.ClientStream
}

type screenerGetScreensClient struct {
	grpc.ClientStream
}

func (x *screenerGetScreensClient) Recv() (*Screen, error) {
	m := new(Screen)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScreenerServer is the server API for Screener service.
// All implementations must embed UnimplementedScreenerServer
// for forward compatibility
type ScreenerServer interface {
	GetScreens(*ScreenSet, Screener_GetScreensServer) error
	mustEmbedUnimplementedScreenerServer()
}

// UnimplementedScreenerServer must be embedded to have forward compatible implementations.
type UnimplementedScreenerServer struct {
}

func (UnimplementedScreenerServer) GetScreens(*ScreenSet, Screener_GetScreensServer) error {
	return status.Errorf(codes.Unimplemented, "method GetScreens not implemented")
}
func (UnimplementedScreenerServer) mustEmbedUnimplementedScreenerServer() {}

// UnsafeScreenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScreenerServer will
// result in compilation errors.
type UnsafeScreenerServer interface {
	mustEmbedUnimplementedScreenerServer()
}

func RegisterScreenerServer(s grpc.ServiceRegistrar, srv ScreenerServer) {
	s.RegisterService(&_Screener_serviceDesc, srv)
}

func _Screener_GetScreens_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ScreenSet)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScreenerServer).GetScreens(m, &screenerGetScreensServer{stream})
}

type Screener_GetScreensServer interface {
	Send(*Screen) error
	grpc.ServerStream
}

type screenerGetScreensServer struct {
	grpc.ServerStream
}

func (x *screenerGetScreensServer) Send(m *Screen) error {
	return x.ServerStream.SendMsg(m)
}

var _Screener_serviceDesc = grpc.ServiceDesc{
	ServiceName: "uggly.Screener",
	HandlerType: (*ScreenerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetScreens",
			Handler:       _Screener_GetScreens_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "uggly.proto",
}
